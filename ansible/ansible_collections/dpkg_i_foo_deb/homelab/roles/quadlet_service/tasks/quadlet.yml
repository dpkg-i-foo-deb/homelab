---
- name: Ensure there is a Quadlet file for {{ quadlet_service_definition.name }}
  become: true
  become_user: '{{ quadlet_service_definition.user }}'
  notify: "restart {{ quadlet_service_definition.name }}"
  containers.podman.podman_container:
    name: '{{ quadlet_service_definition.name }}'
    image: '{{ quadlet_service_definition.image }}'
    state: quadlet
    quadlet_filename: '{{ quadlet_service_definition.filename | default(quadlet_service_definition.name, true) }}'
    ports: >-
      {{ omit
        if quadlet_service_definition.host_network is defined and quadlet_service_definition.host_network
        else
          quadlet_service_definition.ports
        }}
    network: >-
        {{ omit
        if quadlet_service_definition.host_network is defined and quadlet_service_definition.host_network
        else (
          quadlet_service_definition.networks | map(attribute='name') | list
          if quadlet_service_definition.networks is defined
          else []
        ) }}
    volumes: "{{ combined_volumes }}"
    env: >-
      {{ omit
      if quadlet_service_definition.env is not defined or quadlet_service_definition.env | length == 0
      else quadlet_service_definition.env }}
    quadlet_options:
      - 'AutoUpdate={{ quadlet_service_definition.auto_update_strategy | default(default_auto_update_strategy) }}'
      - 'Pull={{ quadlet_service_definition.pull_strategy | default(default_pull_strategy) }}'
      - |
        [Service]
        Restart={{ quadlet_service_definition.restart_when | default(default_restart_when) }}
        RestartSec={{ quadlet_service_definition.restart_secs | default(default_restart_secs) }}
      - |
        [Install]
        WantedBy=default.target multi-user.target
