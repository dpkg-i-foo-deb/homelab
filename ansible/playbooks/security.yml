- name: Configure security virtual machine
  hosts: security
  vars:
    security_network: security
    security_keycloak_pg_pass: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      34623238643730623933356136663966326437333764343138313661383733393837326336376162
      3165623636366538653037343839313835376138616336620a353638633138643535316664626232
      33653234373836303139346238643336653139646663626636613766636465313463666536313730
      3266623763376635370a386135663562613737663431336464663666363839356235633939626330
      6561
    security_keycloak_admin_user: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      31636265363930343931613234333463333837653765333633336132663035313036383761616630
      6637393066343333626236383066366136343863353963310a633330313065363534633661373730
      38643361316332656433326262656464636130323132303237616639306466653837633133353831
      6533373938626333380a363132343063366230353736383766633436353338656364633535363162
      3863
    security_keycloak_admin_password: !vault |
      $ANSIBLE_VAULT;1.1;AES256
      30613837336139366632376265353233353532633765363632373063393162343037343833343037
      3364363865346164663537346537396637666563336139310a316463623463373333613864396631
      30376566326439353732653334303437343837643664346634373735343565356132643230323434
      6436636335386631310a323835636630353865313832303862633366326463663439646630383362
      3562

    security_wazuh_certs: '/var/wazuh'
    security_wazuh_generator_conf: '/var/wazuh_generator'

  tasks:

    - name: Login to homelab registry
      tags:
        - general
      ansible.builtin.import_role:
        name: podman
        tasks_from: login
      vars:
        podman_login_registry: '{{ registry_host }}.{{ internet_host }}'
        podman_login_user: '{{ homelab_registry_user }}'
        podman_login_pass: '{{ homelab_registry_pass }}'
        podman_user: '{{ container_user }}'

    - name: Deploy Postgres for keycloak
      tags:
        - oidc
        - deploy
      ansible.builtin.import_role:
        name: dpkg_i_foo_deb.homelab.quadlet_service
      vars:
        quadlet_service_definition:
          name: postgres
          image: '{{ registry_host }}.{{ internet_host }}/dockerhub-proxy/library/postgres:latest'
          registry_user: '{{ homelab_registry_user }}'
          registry_pass: '{{ homelab_registry_pass }}'
          user: '{{ container_user }}'
          networks:
            - name: '{{ security_network }}'
          ports:
            - '5432:5432'
          volumes:
            - name: 'postgres_keycloak'
              dest: '/var/lib/postgresql/:z'
          env:
            POSTGRES_DB: 'keycloak'
            POSTGRES_USER: 'keycloak'
            POSTGRES_PASSWORD: '{{ security_keycloak_pg_pass }}'

    - name: Deploy Keycloak
      tags:
        - oidc
        - deploy
      ansible.builtin.import_role:
        name: dpkg_i_foo_deb.homelab.quadlet_service
      vars:
        quadlet_service_definition:
          name: keycloak
          image: 'quay.io/keycloak/keycloak:latest'
          user: '{{ container_user }}'
          command: 'start'
          ports:
            - '8081:8080'
          networks:
            - name: '{{ security_network }}'
          env:
            KC_DB: postgres
            KC_DB_USERNAME: keycloak
            KC_DB_PASSWORD: '{{ security_keycloak_pg_pass }}'
            KC_HOSTNAME_PORT: 8080
            KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
            KC_PROXY_HEADERS: xforwarded
            KC_HOSTNAME_STRICT_HTTPS: 'false'
            KC_HOSTNAME_STRICT: 'false'
            KC_HOSTNAME_URL: 'https://auth.{{ internet_host }}'
            KC_HTTP_ENABLED: 'true'
            # KC_BOOTSTRAP_ADMIN_USERNAME
            # KC_BOOTSTRAP_ADMIN_PASSWORD

    - name: Deploy Vaultwarden
      ansible.builtin.import_role:
        name: dpkg_i_foo_deb.homelab.quadlet_service
      vars:
        quadlet_service_definition:
          name: vaultwarden
          image: 'docker.io/vaultwarden/server:latest'
          registry_user: '{{ homelab_registry_user }}'
          registry_pass: '{{ homelab_registry_pass }}'
          user: '{{ container_user }}'
          ports:
            - '8080:80'
          volumes:
            - name: 'vaultwarden'
              dest: '/data:z'
          env:
            DOMAIN: 'https://{{ password_mgr_host }}.{{ internet_host }}'
            LOG_LEVEL: 'info'
            ADMIN_TOKEN: !vault |
              $ANSIBLE_VAULT;1.1;AES256
              62333933613636626334633735643234373361643037303733353264663733363234396261343332
              6333656663366337663236633437303832643165303361330a356163613365633131363662323235
              33373233656437303835306231623065613133363263323334643839363161633030333034376563
              3830386264633761310a653065356265356334343831336132343366333932646534326663376235
              36656634623663356266343131666236666638383865373366323266623237366363356431336233
              36616664613965386563623064663030636137363365666139353036383134656639383136623835
              31363662613932623136646332383738663433376634363637333533333466383538323832613638
              35656232303366366331

    # - name: Generate Wazuh certificates
    #   ansible.builtin.import_role:
    #     name: wazuh_indexer
    #     tasks_from: generate_certs
    #   vars:
    #     wazuh_indexer_user: '{{ security_user }}'
    #     wazuh_indexer_group: '{{ security_user }}'
    #     wazuh_indexer_tls_dir: '{{ security_wazuh_certs }}'
    #     wazuh_indexer_host: 'wazuh.indexer'
    #     wazuh_indexer_manager_host: 'wazuh.manager'
    #     wazuh_indexer_dashboard_host: 'wazuh.dashboard'
    #     wazuh_indexer_tls_conf_dir: '{{ security_wazuh_generator_conf }}'

    - name: Copy Wazuh Indexer configuration file
      become: true
      ansible.builtin.copy:
        src: files/wazuh_indexer/wazuh.indexer.yml
        dest: '/var/wazuh_indexer/wazuh.indexer.yml'
        owner: '{{ container_user }}'
        group: '{{ container_user }}'
        mode: '0777'

    - name: Template Wazuh Indexer configuration users file
      become: true
      vars:
        wazuh_indexer_admin_hash: '$2y$12$PFQeLaOF/IlLbEmdGxX9R.Q1WJEkVmkvEAYQFjhb48ISHwAV1VAui'
      ansible.builtin.template:
        src: templates/wazuh_indexer/internal_users.yml.j2
        dest: '/var/wazuh_indexer/internal_users.yml'
        owner: '{{ container_user }}'
        group: '{{ container_user }}'
        mode: '0777'

    - name: Deploy Wazuh indexer
      ansible.builtin.import_role:
        name: dpkg_i_foo_deb.homelab.quadlet_service
      vars:
        quadlet_service_definition:
          name: wazuh_indexer
          image: '{{ registry_host }}.{{ internet_host }}/dockerhub-proxy/wazuh/wazuh-indexer:4.11.0'
          registry_user: '{{ homelab_registry_user }}'
          registry_pass: '{{ homelab_registry_pass }}'
          image_tag: '4.11.0'
          user: '{{ container_user }}'
          hostname: 'wazuh.indexer'
          networks:
            - name: '{{ security_network }}'
          ports:
            - '9200:9200'
          volumes:
            - name: 'wazuh_indexer'
              dest: '/var/lib/wazuh-indexer:z'
          file_mounts:
            - src: '/var/wazuh/root-ca.pem'
              dest: '/usr/share/wazuh-indexer/certs/root-ca.pem:z'
            - src: '/var/wazuh/wazuh.indexer-key.pem'
              dest: '/usr/share/wazuh-indexer/certs/wazuh.indexer.key:z'
            - src: '/var/wazuh/wazuh.indexer.pem'
              dest: '/usr/share/wazuh-indexer/certs/wazuh.indexer.pem:z'
            - src: '/var/wazuh/admin.pem'
              dest: '/usr/share/wazuh-indexer/cers/admin.pem:z'
            - src: '/var/wazuh/admin-key.pem'
              dest: '/usr/share/wazuh-indexer/cers/admin.key:z'
            - src: '/var/wazuh_indexer/wazuh.indexer.yml'
              dest: '/usr/share/wazuh-indexer/opensearch.yml:z'
            - src: '/var/wazuh_indexer/internal_users.yml'
              dest: '/usr/share/wazuh-indexer/opensearch-security/internal_users.yml:z'
          env:
            OPENSEARCH_JAVA_OPTS: '-Xms1g -Xmx1g'

    - name: Copy Wazuh Manager configuration file
      become: true
      ansible.builtin.copy:
        src: files/wazuh_manager/wazuh_manager.conf
        dest: '/var/wazuh_manager/wazuh_manager.conf'
        owner: '{{ container_user }}'
        group: '{{ container_user }}'
        mode: '0777'

    - name: Template Wazuh Manager authd password file
      vars:
        wazuh_manager_authd_password: '{{ siem_enrollment_pass }}'
      become: true
      ansible.builtin.template:
        src: templates/wazuh_manager/authd.pass.j2
        dest: '/var/wazuh_manager/authd.pass'
        owner: '{{ container_user }}'
        group: '{{ container_user }}'
        mode: '0777'

    - name: Deploy Wazuh Manager
      ansible.builtin.import_role:
        name: dpkg_i_foo_deb.homelab.quadlet_service
      vars:
        quadlet_service_definition:
          name: wazuh_manager
          image: '{{ registry_host }}.{{ internet_host }}/dockerhub-proxy/wazuh/wazuh-manager:4.11.0'
          registry_user: '{{ homelab_registry_user }}'
          registry_pass: '{{ homelab_registry_pass }}'
          image_tag: '4.11.0'
          user: '{{ container_user }}'
          hostname: 'wazuh.manager'
          networks:
            - name: '{{ security_network }}'
          ports:
            - '1514:1514'
            - '1515:1515'
            - '514:514/udp'
            - '55000:55000'
          volumes:
            - name: 'wazuh_manager_conf'
              dest: '/var/ossec/api/configuration:z'
            - name: 'wazuh_manager_etc'
              dest: '/var/ossec/etc:z'
            - name: 'wazuh_manager_logs'
              dest: '/var/ossec/logs:z'
            - name: 'wazuh_manager_queue'
              dest: '/var/ossec/queue:z'
            - name: 'wazuh_manager_var_multigroups'
              dest: '/var/ossec/var/multigroups:z'
            - name: 'wazuh_manager_integrations'
              dest: '/var/ossec/integrations:z'
            - name: 'wazuh_manager_active_response'
              dest: '/var/ossec/active_response:z'
            - name: 'wazuh_manager_agentless'
              dest: '/var/ossec/agentless:z'
            - name: 'wazuh_manager_wodles'
              dest: '/var/ossec/wodles:z'
            - name: 'wazuh_manager_filebeat_etc'
              dest: '/var/filebeat/etc:z'
            - name: 'wazuh_manager_filebeat_var'
              dest: '/var/filebeat/var:z'
          file_mounts:
            - src: '/var/wazuh/root-ca-manager.pem'
              dest: '/etc/ssl/root-ca.pem:z'
            - src: '/var/wazuh/wazuh.manager.pem'
              dest: '/etc/ssl/filebeat.pem:z'
            - src: '/var/wazuh/wazuh.manager-key.pem'
              dest: '/etc/ssl/filebeat.key:z'
            - src: '/var/wazuh_manager/wazuh_manager.conf'
              dest: '/wazuh-config-mount/etc/ossec.conf:z'
            - src: '/var/wazuh_manager/authd.pass'
              dest: '/var/ossec/etc/authd.pass:z'
          env:
            INDEXER_URL: 'https://wazuh.indexer:9200'
            INDEXER_USERNAME: 'admin'
            INDEXER_PASSWORD: !vault |
              $ANSIBLE_VAULT;1.1;AES256
              37653335646362666438386235303265616231653264633630323638346363383439336334613830
              3532393131333237643364653066376563386337373737310a656464613135386166336366333261
              61646166303636393137373437316639623932376537343338353036393734356631353531633237
              3038653332346566350a373566366163343732363263653935626531326566356437653532356638
              3832
            FILEBEAT_SSL_VERIFICATION_MODE: full
            SSL_CERTIFICATE_AUTHORITIES: /etc/ssl/root-ca.pem
            SSL_CERTIFICATE: /etc/ssl/filebeat.pem
            SSL_KEY: /etc/ssl/filebeat.key
            API_USERNAME: !vault |
              $ANSIBLE_VAULT;1.1;AES256
              32353235636634353461663335653263373766626664623861623137643536666336663561383462
              6361633932623232643231396266336138393966636234310a363137386133626135336530633433
              63623365303866663438623463303536613832623638616661343663313731373462316232666464
              3836633366656433610a343031383261616562626432303230393363663234633434633136633131
              3631
            API_PASSWORD: !vault |
              $ANSIBLE_VAULT;1.1;AES256
              39353361343538626337383866653139323338306335653965643063356336623737333636663265
              3731633536386635623064366432303731636331313364660a313664366334373432356465623535
              32383532643362313830653033393234326531353238653832363965643639653465653634393264
              3163373065333763640a626362316461376331366234623137316363343138396162643265353531
              32383266613039643463663639396330633264396135616631393461663765313638

    - name: Copy Opensearch configuration file
      become: true
      ansible.builtin.copy:
        src: files/wazuh_dashboard/opensearch_dashboards.yml
        dest: '/var/wazuh_dashboard/opensearch_dashboards.yml'
        owner: '{{ container_user }}'
        group: '{{ container_user }}'
        mode: '0777'

    - name: Template Wazuh dashboard configuration file
      vars:
        wazuh_dashboard_manager_host: 'wazuh.manager'
        wazuh_dashboard_manager_user: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          32353235636634353461663335653263373766626664623861623137643536666336663561383462
          6361633932623232643231396266336138393966636234310a363137386133626135336530633433
          63623365303866663438623463303536613832623638616661343663313731373462316232666464
          3836633366656433610a343031383261616562626432303230393363663234633434633136633131
          3631
        wazuh_dashboard_manager_pass: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          39353361343538626337383866653139323338306335653965643063356336623737333636663265
          3731633536386635623064366432303731636331313364660a313664366334373432356465623535
          32383532643362313830653033393234326531353238653832363965643639653465653634393264
          3163373065333763640a626362316461376331366234623137316363343138396162643265353531
          32383266613039643463663639396330633264396135616631393461663765313638
      become: true
      ansible.builtin.template:
        src: templates/wazuh_dashboard/wazuh.yml.j2
        dest: '/var/wazuh_dashboard/wazuh.yml'
        owner: '{{ container_user }}'
        group: '{{ container_user }}'
        mode: '0777'

    - name: Deploy Wazuh Dashboard
      ansible.builtin.import_role:
        name: dpkg_i_foo_deb.homelab.quadlet_service
      vars:
        quadlet_service_definition:
          name: wazuh_dashboard
          image: '{{ registry_host }}.{{ internet_host }}/dockerhub-proxy/wazuh/wazuh-dashboard:4.11.0'
          registry_user: '{{ homelab_registry_user }}'
          registry_pass: '{{ homelab_registry_pass }}'
          image_tag: '4.11.0'
          user: '{{ container_user }}'
          networks:
            - name: '{{ security_network }}'
          hostname: 'wazuh.dashboard'
          ports:
            - '5601:5601'
          volumes:
            - name: 'wazuh_dashboard_api_conf'
              dest: '/usr/share/wazuh-dashboard/data/wazuh/config:z'
            - name: 'wazuh_dashboard_custom'
              dest: '/usr/share/wazuh-dashboard/plugins/wazuh/public/assets/custom:z'
          file_mounts:
            - src: '/var/wazuh/wazuh.dashboard.pem'
              dest: '/usr/share/wazuh-dashboard/certs/wazuh-dashboard.pem:z'
            - src: '/var/wazuh/wazuh.dashboard-key.pem'
              dest: '/usr/share/wazuh-dashboard/certs/wazuh-dashboard-key.pem:z'
            - src: '/var/wazuh/root-ca.pem'
              dest: '/usr/share/wazuh-dashboard/certs/root-ca.pem:z'
            - src: '/var/wazuh_dashboard/opensearch_dashboards.yml'
              dest: '/usr/share/wazuh-dashboard/config/opensearch_dashboards.yml:z'
            - src: '/var/wazuh_dashboard/wazuh.yml'
              dest: '/usr/share/wazuh-dashboard/data/wazuh/config/wazuh.yml:z'
          env:
            INDEXER_USERNAME: 'admin'
            INDEXER_PASSWORD: !vault |
              $ANSIBLE_VAULT;1.1;AES256
              37653335646362666438386235303265616231653264633630323638346363383439336334613830
              3532393131333237643364653066376563386337373737310a656464613135386166336366333261
              61646166303636393137373437316639623932376537343338353036393734356631353531633237
              3038653332346566350a373566366163343732363263653935626531326566356437653532356638
              3832
            WAZUH_API_URL: 'https://wazuh.manager'
            DASHBOARD_USERNAME: 'admin'
            DASHBOARD_PASSWORD: !vault |
              $ANSIBLE_VAULT;1.1;AES256
              37653335646362666438386235303265616231653264633630323638346363383439336334613830
              3532393131333237643364653066376563386337373737310a656464613135386166336366333261
              61646166303636393137373437316639623932376537343338353036393734356631353531633237
              3038653332346566350a373566366163343732363263653935626531326566356437653532356638
              3832
            API_USERNAME: !vault |
              $ANSIBLE_VAULT;1.1;AES256
              32353235636634353461663335653263373766626664623861623137643536666336663561383462
              6361633932623232643231396266336138393966636234310a363137386133626135336530633433
              63623365303866663438623463303536613832623638616661343663313731373462316232666464
              3836633366656433610a343031383261616562626432303230393363663234633434633136633131
              3631
            API_PASSWORD: !vault |
              $ANSIBLE_VAULT;1.1;AES256
              39353361343538626337383866653139323338306335653965643063356336623737333636663265
              3731633536386635623064366432303731636331313364660a313664366334373432356465623535
              32383532643362313830653033393234326531353238653832363965643639653465653634393264
              3163373065333763640a626362316461376331366234623137316363343138396162643265353531
              32383266613039643463663639396330633264396135616631393461663765313638


    - name: Wait a minute for Keycloak to initialize
      ansible.builtin.pause:
        seconds: 60

    - name: Ensure homelab Keycloak realm is configured
      tags:
        - keycloak-clients
      middleware_automation.keycloak.keycloak_realm:
        auth_client_id: admin-cli
        auth_keycloak_url: 'https://{{ auth_host }}.{{ internet_host }}'
        auth_realm: master
        auth_username: '{{ security_keycloak_admin_user }}'
        auth_password: '{{ security_keycloak_admin_password }}'
        registration_allowed: false
        remember_me: true
        verify_email: false
        realm: '{{ homelab_realm }}'
        enabled: true
        id: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          61333130633239303036376439316630306563633638643135326166656166386166623065346231
          3466353261323264383666306661613833653563646430610a383861306366373439653362363739
          33323564346461343165323036363764306537356632333835356431363565356133383364373662
          3334663364623734300a376335666437366530653030656163386635383962306534303263363136
          3636
        display_name: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          64313033653233323364373663386665396530393231323631346539306435313865396536666636
          6431373864333239393963363961313064643730633130390a616664653533383330303636376437
          32346665313466643939643835613731646661336465323735303032346535656439376636303131
          6664323533613831390a333933306337613935343961366530616632663363643735386661636430
          6436
        state: present

    - name: Ensure Code service is registered as a client
      tags:
        - keycloak-clients
      middleware_automation.keycloak.keycloak_client:
        auth_client_id: admin-cli
        auth_keycloak_url: 'https://{{ auth_host }}.{{ internet_host }}'
        auth_realm: master
        auth_username: '{{ security_keycloak_admin_user }}'
        auth_password: '{{ security_keycloak_admin_password }}'
        state: present
        realm: '{{ homelab_realm }}'
        client_id: '{{ code_client }}'
        name: '{{ code_client }}'
        description: 'Main Code App. To develop in general'
        # base_url: 'https://{{ code_host }}.{{ internet_host }}'
        enabled: true
        client_authenticator_type: client-secret
        secret: '{{ code_secret }}'
        redirect_uris:
          - 'https://{{ code_personal_host }}.{{ internet_host }}/*'
          - 'https://{{ code_work_host }}.{{ internet_host }}/*'
        bearer_only: false
        consent_required: false
        standard_flow_enabled: true
        implicit_flow_enabled: false
        direct_access_grants_enabled: false
        service_accounts_enabled: false
        authorization_services_enabled: false
        public_client: false
        frontchannel_logout: false
        protocol: openid-connect
        protocol_mappers:
          - config:
              included.client.audience: '{{ code_client }}'
              access.token.claim: 'true'
              id.token.claim: 'true'
            name: '{{ code_client }}-audience'
            protocol: openid-connect
            protocolMapper: oidc-audience-mapper
        full_scope_allowed: false
        node_re_registration_timeout: -1
        use_template_config: false
        use_template_scope: false
        use_template_mappers: false
        always_display_in_console: true

    - name: Ensure Remote service is registered as a client
      tags:
        - keycloak-clients
      middleware_automation.keycloak.keycloak_client:
        auth_client_id: admin-cli
        auth_keycloak_url: 'https://{{ auth_host }}.{{ internet_host }}'
        auth_realm: master
        auth_username: '{{ security_keycloak_admin_user }}'
        auth_password: '{{ security_keycloak_admin_password }}'
        state: present
        realm: '{{ homelab_realm }}'
        client_id: '{{ remote_client }}'
        name: '{{ remote_client }}'
        description: 'Remote access to homelab virtual machines'
        base_url: 'https://{{ remote_host }}.{{ internet_host }}'
        enabled: true
        client_authenticator_type: client-secret
        secret: '{{ remote_secret }}'
        redirect_uris:
          - 'https://{{ remote_host }}.{{ internet_host }}/*'
        bearer_only: false
        consent_required: false
        standard_flow_enabled: true
        implicit_flow_enabled: true
        direct_access_grants_enabled: false
        service_accounts_enabled: false
        authorization_services_enabled: false
        public_client: false
        frontchannel_logout: false
        protocol: openid-connect
        protocol_mappers:
          - config:
              included.client.audience: '{{ remote_client }}'
              access.token.claim: 'true'
              id.token.claim: 'true'
            name: '{{ remote_client }}-audience'
            protocol: openid-connect
            protocolMapper: oidc-audience-mapper
        full_scope_allowed: false
        node_re_registration_timeout: -1
        use_template_config: false
        use_template_scope: false
        use_template_mappers: false
        always_display_in_console: true

    - name: Ensure Notes taking service is registered as a client
      tags:
        - keycloak-clients
      middleware_automation.keycloak.keycloak_client:
        auth_client_id: admin-cli
        auth_keycloak_url: 'https://{{ auth_host }}.{{ internet_host }}'
        auth_realm: master
        auth_username: '{{ security_keycloak_admin_user }}'
        auth_password: '{{ security_keycloak_admin_password }}'
        state: present
        realm: '{{ homelab_realm }}'
        client_id: '{{ notes_client }}'
        name: '{{ notes_client }}'
        description: 'Note taking app'
        base_url: 'https://{{ notes_host }}.{{ internet_host }}'
        enabled: true
        client_authenticator_type: client-secret
        secret: '{{ notes_secret }}'
        redirect_uris:
          - 'https://{{ notes_host }}.{{ internet_host }}/*'
        bearer_only: false
        consent_required: false
        standard_flow_enabled: true
        implicit_flow_enabled: true
        direct_access_grants_enabled: false
        service_accounts_enabled: false
        authorization_services_enabled: false
        public_client: false
        frontchannel_logout: false
        protocol: openid-connect
        protocol_mappers:
          - config:
              included.client.audience: '{{ notes_client }}'
              access.token.claim: 'true'
              id.token.claim: 'true'
            name: '{{ notes_client }}-audience'
            protocol: openid-connect
            protocolMapper: oidc-audience-mapper
        full_scope_allowed: false
        node_re_registration_timeout: -1
        use_template_config: false
        use_template_scope: false
        use_template_mappers: false
        always_display_in_console: true

    - name: Ensure RSS service is registered as a client
      tags:
        - keycloak-clients
      middleware_automation.keycloak.keycloak_client:
        auth_client_id: admin-cli
        auth_keycloak_url: 'https://{{ auth_host }}.{{ internet_host }}'
        auth_realm: master
        auth_username: '{{ security_keycloak_admin_user }}'
        auth_password: '{{ security_keycloak_admin_password }}'
        state: present
        realm: '{{ homelab_realm }}'
        client_id: '{{ rss_client }}'
        name: '{{ rss_client }}'
        description: 'RSS reader'
        base_url: 'https://{{ rss_host }}.{{ internet_host }}'
        enabled: true
        client_authenticator_type: client-secret
        secret: '{{ rss_secret }}'
        redirect_uris:
          - 'https://{{ rss_host }}.{{ internet_host }}/*'
          - 'https://{{ rss_host }}.{{ internet_host }}'
          - 'http://{{ rss_host }}.{{ internet_host }}/*'
          - 'http://{{ rss_host }}.{{ internet_host }}'
        bearer_only: false
        consent_required: false
        standard_flow_enabled: true
        implicit_flow_enabled: true
        direct_access_grants_enabled: false
        service_accounts_enabled: false
        authorization_services_enabled: false
        public_client: false
        frontchannel_logout: false
        protocol: openid-connect
        protocol_mappers:
          - config:
              included.client.audience: '{{ rss_client }}'
              access.token.claim: 'true'
              id.token.claim: 'true'
            name: '{{ rss_client }}-audience'
            protocol: openid-connect
            protocolMapper: oidc-audience-mapper
        full_scope_allowed: false
        node_re_registration_timeout: -1
        use_template_config: false
        use_template_scope: false
        use_template_mappers: false
        always_display_in_console: true

    - name: Ensure Photos service is registered as a client
      tags:
        - keycloak-clients
      middleware_automation.keycloak.keycloak_client:
        auth_client_id: admin-cli
        auth_keycloak_url: 'https://{{ auth_host }}.{{ internet_host }}'
        auth_realm: master
        auth_username: '{{ security_keycloak_admin_user }}'
        auth_password: '{{ security_keycloak_admin_password }}'
        state: present
        realm: '{{ homelab_realm }}'
        client_id: '{{ photos_client }}'
        name: '{{ photos_client }}'
        description: 'Photos Service'
        base_url: 'https://{{ photos_host }}.{{ internet_host }}'
        enabled: true
        client_authenticator_type: client-secret
        secret: '{{ photos_secret }}'
        redirect_uris:
          - 'https://{{ photos_host }}.{{ internet_host }}/*'
          - 'https://{{ photos_host }}.{{ internet_host }}'
          - 'http://{{ photos_host }}.{{ internet_host }}/*'
          - 'http://{{ photos_host }}.{{ internet_host }}'
        bearer_only: false
        consent_required: false
        standard_flow_enabled: true
        implicit_flow_enabled: true
        direct_access_grants_enabled: false
        service_accounts_enabled: false
        authorization_services_enabled: false
        public_client: false
        frontchannel_logout: false
        protocol: openid-connect
        protocol_mappers:
          - config:
              included.client.audience: '{{ photos_client }}'
              access.token.claim: 'true'
              id.token.claim: 'true'
            name: '{{ photos_client }}-audience'
            protocol: openid-connect
            protocolMapper: oidc-audience-mapper
        full_scope_allowed: false
        node_re_registration_timeout: -1
        use_template_config: false
        use_template_scope: false
        use_template_mappers: false
        always_display_in_console: true

    - name: Ensure Metrics service is registered as a client
      tags:
        - keycloak-clients
      middleware_automation.keycloak.keycloak_client:
        auth_client_id: admin-cli
        auth_keycloak_url: 'https://{{ auth_host }}.{{ internet_host }}'
        auth_realm: master
        auth_username: '{{ security_keycloak_admin_user }}'
        auth_password: '{{ security_keycloak_admin_password }}'
        state: present
        realm: '{{ homelab_realm }}'
        client_id: '{{ metrics_client }}'
        name: '{{ metrics_client }}'
        description: 'Metrics Service'
        base_url: 'https://{{ metrics_host }}.{{ internet_host }}'
        enabled: true
        client_authenticator_type: client-secret
        secret: '{{ metrics_secret }}'
        redirect_uris:
          - 'https://{{ metrics_host }}.{{ internet_host }}/*'
          - 'https://{{ metrics_host }}.{{ internet_host }}'
          - 'http://{{ metrics_host }}.{{ internet_host }}/*'
          - 'http://{{ metrics_host }}.{{ internet_host }}'
        bearer_only: false
        consent_required: false
        standard_flow_enabled: true
        implicit_flow_enabled: true
        direct_access_grants_enabled: false
        service_accounts_enabled: false
        authorization_services_enabled: false
        public_client: false
        frontchannel_logout: false
        protocol: openid-connect
        protocol_mappers:
          - config:
              included.client.audience: '{{ metrics_client }}'
              access.token.claim: 'true'
              id.token.claim: 'true'
            name: '{{ metrics_client }}-audience'
            protocol: openid-connect
            protocolMapper: oidc-audience-mapper
        full_scope_allowed: false
        node_re_registration_timeout: -1
        use_template_config: false
        use_template_scope: false
        use_template_mappers: false
        always_display_in_console: true

    - name: Ensure Automation service is registered as a client
      tags:
        - keycloak-clients
      middleware_automation.keycloak.keycloak_client:
        auth_client_id: admin-cli
        auth_keycloak_url: 'https://{{ auth_host }}.{{ internet_host }}'
        auth_realm: master
        auth_username: '{{ security_keycloak_admin_user }}'
        auth_password: '{{ security_keycloak_admin_password }}'
        state: present
        realm: '{{ homelab_realm }}'
        client_id: '{{ automation_client }}'
        name: '{{ automation_client }}'
        description: 'Automation Service'
        base_url: 'https://{{ automation_host }}.{{ internet_host }}'
        enabled: true
        client_authenticator_type: client-secret
        secret: '{{ automation_secret }}'
        redirect_uris:
          - 'https://{{ automation_host }}.{{ internet_host }}/*'
          - 'https://{{ automation_host }}.{{ internet_host }}'
          - 'http://{{ automation_host }}.{{ internet_host }}/*'
          - 'http://{{ automation_host }}.{{ internet_host }}'
        bearer_only: false
        consent_required: false
        standard_flow_enabled: true
        implicit_flow_enabled: true
        direct_access_grants_enabled: false
        service_accounts_enabled: false
        authorization_services_enabled: false
        public_client: false
        frontchannel_logout: false
        protocol: openid-connect
        protocol_mappers:
          - config:
              included.client.audience: '{{ automation_client }}'
              access.token.claim: 'true'
              id.token.claim: 'true'
            name: '{{ automation_client }}-audience'
            protocol: openid-connect
            protocolMapper: oidc-audience-mapper
        full_scope_allowed: false
        node_re_registration_timeout: -1
        use_template_config: false
        use_template_scope: false
        use_template_mappers: false
        always_display_in_console: true
